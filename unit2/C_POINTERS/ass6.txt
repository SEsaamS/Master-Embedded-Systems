EX:1
#include <stdio.h>

int main() {
	int m;
	int* ab;
	m=29;
	printf("address of m : %p \n",&m);
	printf("value of m : %d \n",m);
	ab=&m;
	printf("Now ab is assigned with the address of m. \n");
	printf("address of pointer ab : %p \n",ab);
	printf("value of pointer ab : %d \n",*ab);
	m=34;
	printf("The value of m assigned to 34 now. \n");
	printf("address of pointer ab : %p \n",ab);
	printf("value of pointer ab : %d \n",*ab);
	printf("The pointer variable ab is assigned with the value 7 now. \n");
	*ab=7;
	printf("address of pointer ab : %p \n",ab);
	printf("value of pointer ab : %d \n",*ab);
	return 0;
}

#####################################  COUNSOLE OUTPUT  #####################################
address of m : 0061FF18 
value of m : 29 
Now ab is assigned with the address of m. 
address of pointer ab : 0061FF18 
value of pointer ab : 29 
The value of m assigned to 34 now. 
address of pointer ab : 0061FF18 
value of pointer ab : 34 
The pointer variable ab is assigned with the value 7 now. 
address of pointer ab : 0061FF18 
value of pointer ab : 7 
################################################################################################
EX:2
#include <stdio.h>

int main() {
	char alpha[27];
	int x;
	char *ptr;
	ptr=alpha;
	for(x=0;x<26;x++)
	{
		*ptr=x+'A';
		ptr++;
	}
	ptr=alpha;
	 printf(" The Alphabets are : \n");
	 for(x=0;x<26;x++)
	 {
		 printf(" %c ",*ptr);
		 ptr++;
	 }
	return 0;
}

#####################################  COUNSOLE OUTPUT  #####################################

The Alphabets are : 
A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z 
################################################################################################
EX:3
#include <stdio.h>
int main() {
	char str[50];
	int x;
	char *ptr;
	 int length = 0;
	ptr=str;
	printf("input a string : ");
	fflush(stdout);
	scanf("%s",&str);
	while(*ptr != 0)
	{
		ptr++;
		length++;
	}
	 printf("Reverse string = ");
	 for(x=length;x>=0;--x)
	 {
                 --ptr;
		 printf("%c",*ptr);
		
	 }

	return 0;
}
#####################################  COUNSOLE OUTPUT  #####################################

input a string : w3resource
Reverse string = ecruoser3w
################################################################################################
EX:4
#include <stdio.h>
int main() {
int i,n,arr[15],*ptr;
printf("Input the number of elements to store in the array (max 15) :");
fflush(stdout);
scanf("%d",&n);
ptr=&arr[0];
for(i=0;i<n;i++)
{
	printf("element %d : ",i+1);
	fflush(stdout);
	scanf("%d",ptr);
	ptr++;
}
ptr=&arr[n-1];
printf("The elements of array in reverse order are : \n");
for(i=n;i>0;--i)
{
	printf("\nelement %d : %d" ,i,*ptr);
	ptr--;
}
	return 0;
}
#####################################  COUNSOLE OUTPUT  #####################################

Input the number of elements to store in the array (max 15) :5
element 1 : 2
element 2 : 3
element 3 : 4
element 4 : 5
element 5 : 6
The elements of array in reverse order are : 

element 5 : 6
element 4 : 5
element 3 : 4
element 2 : 3
element 1 : 2
################################################################################################
EX:5
#include <stdio.h>

struct employee {
    char *empname;
    int empid;
};
int main() {

    static struct employee emp1 = {"John", 1001}, emp2 = {"Alex", 1002}, emp3 = {"Taylor", 1003};
    struct employee (*arr[]) = {&emp1, &emp2, &emp3};
    struct employee (*(*pt)[3]) = &arr;
    printf(" Employee Name : %s \n", (**(*pt + 1)).empname);
    printf(" Employee ID :  %d\n", (*(*pt + 1))->empid);


    return 0;
}

#####################################  COUNSOLE OUTPUT  #####################################

Employee Name : Alex 
Employee ID :  1002
################################################################################################
